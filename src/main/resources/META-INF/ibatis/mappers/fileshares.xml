<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" 
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
 
<sqlMap namespace="fileshares">
		
	<!-- 파일 게시판 게시글 목록을 조회한다. -->
	<select id="getFileShares" parameterClass="map" resultClass="com.community.dto.FileShareDto">
		select
			A.post_no as no,
			A.post_board_no as boardNo,
			A.post_title as title,
			A.post_writer_no as writerNo,
			A.post_content as content,
			A.post_important as important,
			A.post_read_count as readCount,
			A.post_suggestion_count as suggestionCount,
			A.post_comment_count as commentCount,
			A.post_deleted as deleted,
			A.post_created_date as createdDate,
			A.post_updated_date as updatedDate,
			A.post_deleted_date as deletedDate,
			A.post_original_no as originalNo,
			B.emp_name as name
		from
			(select
				row_number() over (order by post_no desc) row_numbers,
				A.post_no, A.post_board_no, post_title, A.post_writer_no, A.post_content, A.post_important, A.post_read_count, A.post_suggestion_count, A.post_comment_count,
				A.post_deleted, A.post_created_date, A.post_updated_date, A.post_deleted_date, A.post_original_no, B.emp_name
			from
				comm_posts A, comm_employees B
			where
				A.post_board_no = 101
				and A.post_writer_no = B.emp_no
				and A.post_deleted = 'N'
		<dynamic>
			<isNotNull property="opt">
				<isEqual property="opt" compareValue="title">
			  		and A.post_title like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="writer">
					and B.emp_name like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="content">
					and A.post_content like '%' || #keyword# || '%'
				</isEqual>
			</isNotNull>
		</dynamic>				
				) A, comm_employees B
		where
			 A.post_writer_no = B.emp_no
			 and row_numbers between #begin# and #end#   
	</select>
	
	<!-- 게시글 갯수를 조회한다. -->
	<select id="getTotalRows" parameterClass="map" resultClass="int">
		select
			count(*)
		from
			comm_posts A, comm_employees B
		where
			A.post_deleted = 'N'
			and A.post_board_no = 101
			and A.post_writer_no = B.emp_no
		<dynamic>
			<isNotNull property="opt">
				<isEqual property="opt" compareValue="title">
			  		and A.post_title like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="writer">
					and B.emp_name like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="content">
					and A.post_content like '%' || #keyword# || '%'
				</isEqual>
			</isNotNull>
		</dynamic>
	</select>
	
	<select id="getTotalRowsByEmpNo" parameterClass="map" resultClass="int">
		select
			count(*)
		from
			comm_posts A, comm_employees B
		where
			A.post_deleted = 'N'
			and A.post_writer_no = #writerNo#
			and A.post_writer_no = B.emp_no
		<dynamic>
			<isNotNull property="opt">
				<isEqual property="opt" compareValue="title">
			  		and A.post_title like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="writer">
					and B.emp_name like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="content">
					and A.post_content like '%' || #keyword# || '%'
				</isEqual>
			</isNotNull>
		</dynamic>
	</select>	
	
	<select id="getPostByNo" parameterClass="int" resultClass="com.community.dto.FileShareDto">
		select 
			A.post_no as no,
			A.post_board_no as boardNo,
			A.post_title as title,
			A.post_writer_no as writerNo,
			A.post_content as content,
			A.post_important as important,
			A.post_read_count as readCount,
			A.post_suggestion_count as suggestionCount,
			A.post_comment_count as commentCount,
			A.post_deleted as deleted,
			A.post_created_date as createdDate,
			A.post_updated_date as updatedDate,
			A.post_deleted_date as deletedDate,
			A.post_original_no as originalNo,
			B.emp_name as name,
			C.department_name as departmentName,
			D.position_name as positionName
		from
			comm_posts A, comm_employees B, comm_departments C, comm_positions D
		where
			A.post_writer_no = B.emp_no
			and B.emp_dept_no = C.department_no
			and B.emp_position_no = D.position_no
			and A.post_no = #value#
	</select>
	
	<update id="updateCount" parameterClass="com.community.dto.FileShareDto">
		update
			comm_posts
		set
			post_read_count = #readCount#,
			post_suggestion_count = #suggestionCount#,
			post_comment_count = #commentCount#
		where
			post_no = #no#
	</update>
	
	<update id="updateFileShare" parameterClass="com.community.dto.FileShareDto">
		update
			comm_posts
		set 
			post_board_no = #boardNo#,
			post_title = #title#,
			post_content = #content#,
			post_important = #important#,
			post_read_count = #readCount#,
			post_suggestion_count = #suggestionCount#,
			post_comment_count = #commentCount#,
			post_deleted = #deleted#,
			post_updated_date = sysdate
		where
			post_no = #no#
	</update>
	
	<insert id="insertFile" parameterClass="com.community.vo.FileShare">
		insert into comm_post_files
			(file_no, file_name, file_post_no)
		values
			(comm_files_seq.nextval, #name#, #postNo#)
	</insert>
	
	<select id="getFilesByNo" parameterClass="int" resultClass="com.community.vo.FileShare">
		select 
			file_no as no,
			file_name as name,
			file_post_no as postNo
		from 
			comm_post_files
		where
			file_post_no = #value#
	</select>
	
	<delete id="deleteFiles" parameterClass="int">
		delete from 
			comm_post_files
		where
			file_post_no = #value#
	</delete>
	
	<!-- 전체 게시판 게시글 목록을 조회한다. -->
	<select id="getPostsByEmpNo" parameterClass="map" resultClass="com.community.dto.FileShareDto">
		select
			A.post_no as no,
			A.post_board_no as boardNo,
			A.post_title as title,
			A.post_writer_no as writerNo,
			A.post_content as content,
			A.post_important as important,
			A.post_read_count as readCount,
			A.post_suggestion_count as suggestionCount,
			A.post_comment_count as commentCount,
			A.post_deleted as deleted,
			A.post_created_date as createdDate,
			A.post_updated_date as updatedDate,
			A.post_deleted_date as deletedDate,
			A.post_original_no as originalNo,
			B.emp_name as name,
			C.board_name as boardName
		from
			(select
				row_number() over (order by post_no desc) row_numbers,
				A.post_no, A.post_board_no, post_title, A.post_writer_no, A.post_content, A.post_important, A.post_read_count, A.post_suggestion_count, A.post_comment_count,
				A.post_deleted, A.post_created_date, A.post_updated_date, A.post_deleted_date, A.post_original_no, B.emp_name
			from
				comm_posts A, comm_employees B
			where
				A.post_writer_no = B.emp_no
				and A.post_deleted = 'N'
				and A.post_writer_no = #writerNo#
		<dynamic>
			<isNotNull property="opt">
				<isEqual property="opt" compareValue="title">
			  		and A.post_title like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="writer">
					and B.emp_name like '%' || #keyword# || '%'
				</isEqual>
				<isEqual property="opt" compareValue="content">
					and A.post_content like '%' || #keyword# || '%'
				</isEqual>
			</isNotNull>
		</dynamic>				
				) A, comm_employees B, comm_boards C
		where
			 C.board_no = A.post_board_no
			 and A.post_writer_no = B.emp_no
			 and row_numbers between #begin# and #end#   
	</select>	

</sqlMap>

